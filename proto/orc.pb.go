// Code generated by protoc-gen-go.
// source: orc.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	orc.proto

It has these top-level messages:
	IntegerStatistics
	DoubleStatistics
	StringStatistics
	BucketStatistics
	DecimalStatistics
	DateStatistics
	TimestampStatistics
	BinaryStatistics
	ColumnStatistics
	RowIndexEntry
	RowIndex
	BloomFilter
	BloomFilterIndex
	Stream
	ColumnEncoding
	StripeFooter
	Type
	StripeInformation
	UserMetadataItem
	StripeStatistics
	Metadata
	Footer
	PostScript
	FileTail
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type CompressionKind int32

const (
	CompressionKind_NONE   CompressionKind = 0
	CompressionKind_ZLIB   CompressionKind = 1
	CompressionKind_SNAPPY CompressionKind = 2
	CompressionKind_LZO    CompressionKind = 3
)

var CompressionKind_name = map[int32]string{
	0: "NONE",
	1: "ZLIB",
	2: "SNAPPY",
	3: "LZO",
}
var CompressionKind_value = map[string]int32{
	"NONE":   0,
	"ZLIB":   1,
	"SNAPPY": 2,
	"LZO":    3,
}

func (x CompressionKind) Enum() *CompressionKind {
	p := new(CompressionKind)
	*p = x
	return p
}
func (x CompressionKind) String() string {
	return proto1.EnumName(CompressionKind_name, int32(x))
}
func (x *CompressionKind) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(CompressionKind_value, data, "CompressionKind")
	if err != nil {
		return err
	}
	*x = CompressionKind(value)
	return nil
}
func (CompressionKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// if you add new index stream kinds, you need to make sure to update
// StreamName to ensure it is added to the stripe in the right area
type Stream_Kind int32

const (
	Stream_PRESENT          Stream_Kind = 0
	Stream_DATA             Stream_Kind = 1
	Stream_LENGTH           Stream_Kind = 2
	Stream_DICTIONARY_DATA  Stream_Kind = 3
	Stream_DICTIONARY_COUNT Stream_Kind = 4
	Stream_SECONDARY        Stream_Kind = 5
	Stream_ROW_INDEX        Stream_Kind = 6
	Stream_BLOOM_FILTER     Stream_Kind = 7
)

var Stream_Kind_name = map[int32]string{
	0: "PRESENT",
	1: "DATA",
	2: "LENGTH",
	3: "DICTIONARY_DATA",
	4: "DICTIONARY_COUNT",
	5: "SECONDARY",
	6: "ROW_INDEX",
	7: "BLOOM_FILTER",
}
var Stream_Kind_value = map[string]int32{
	"PRESENT":          0,
	"DATA":             1,
	"LENGTH":           2,
	"DICTIONARY_DATA":  3,
	"DICTIONARY_COUNT": 4,
	"SECONDARY":        5,
	"ROW_INDEX":        6,
	"BLOOM_FILTER":     7,
}

func (x Stream_Kind) Enum() *Stream_Kind {
	p := new(Stream_Kind)
	*p = x
	return p
}
func (x Stream_Kind) String() string {
	return proto1.EnumName(Stream_Kind_name, int32(x))
}
func (x *Stream_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(Stream_Kind_value, data, "Stream_Kind")
	if err != nil {
		return err
	}
	*x = Stream_Kind(value)
	return nil
}
func (Stream_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

type ColumnEncoding_Kind int32

const (
	ColumnEncoding_DIRECT        ColumnEncoding_Kind = 0
	ColumnEncoding_DICTIONARY    ColumnEncoding_Kind = 1
	ColumnEncoding_DIRECT_V2     ColumnEncoding_Kind = 2
	ColumnEncoding_DICTIONARY_V2 ColumnEncoding_Kind = 3
)

var ColumnEncoding_Kind_name = map[int32]string{
	0: "DIRECT",
	1: "DICTIONARY",
	2: "DIRECT_V2",
	3: "DICTIONARY_V2",
}
var ColumnEncoding_Kind_value = map[string]int32{
	"DIRECT":        0,
	"DICTIONARY":    1,
	"DIRECT_V2":     2,
	"DICTIONARY_V2": 3,
}

func (x ColumnEncoding_Kind) Enum() *ColumnEncoding_Kind {
	p := new(ColumnEncoding_Kind)
	*p = x
	return p
}
func (x ColumnEncoding_Kind) String() string {
	return proto1.EnumName(ColumnEncoding_Kind_name, int32(x))
}
func (x *ColumnEncoding_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(ColumnEncoding_Kind_value, data, "ColumnEncoding_Kind")
	if err != nil {
		return err
	}
	*x = ColumnEncoding_Kind(value)
	return nil
}
func (ColumnEncoding_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

type Type_Kind int32

const (
	Type_BOOLEAN   Type_Kind = 0
	Type_BYTE      Type_Kind = 1
	Type_SHORT     Type_Kind = 2
	Type_INT       Type_Kind = 3
	Type_LONG      Type_Kind = 4
	Type_FLOAT     Type_Kind = 5
	Type_DOUBLE    Type_Kind = 6
	Type_STRING    Type_Kind = 7
	Type_BINARY    Type_Kind = 8
	Type_TIMESTAMP Type_Kind = 9
	Type_LIST      Type_Kind = 10
	Type_MAP       Type_Kind = 11
	Type_STRUCT    Type_Kind = 12
	Type_UNION     Type_Kind = 13
	Type_DECIMAL   Type_Kind = 14
	Type_DATE      Type_Kind = 15
	Type_VARCHAR   Type_Kind = 16
	Type_CHAR      Type_Kind = 17
)

var Type_Kind_name = map[int32]string{
	0:  "BOOLEAN",
	1:  "BYTE",
	2:  "SHORT",
	3:  "INT",
	4:  "LONG",
	5:  "FLOAT",
	6:  "DOUBLE",
	7:  "STRING",
	8:  "BINARY",
	9:  "TIMESTAMP",
	10: "LIST",
	11: "MAP",
	12: "STRUCT",
	13: "UNION",
	14: "DECIMAL",
	15: "DATE",
	16: "VARCHAR",
	17: "CHAR",
}
var Type_Kind_value = map[string]int32{
	"BOOLEAN":   0,
	"BYTE":      1,
	"SHORT":     2,
	"INT":       3,
	"LONG":      4,
	"FLOAT":     5,
	"DOUBLE":    6,
	"STRING":    7,
	"BINARY":    8,
	"TIMESTAMP": 9,
	"LIST":      10,
	"MAP":       11,
	"STRUCT":    12,
	"UNION":     13,
	"DECIMAL":   14,
	"DATE":      15,
	"VARCHAR":   16,
	"CHAR":      17,
}

func (x Type_Kind) Enum() *Type_Kind {
	p := new(Type_Kind)
	*p = x
	return p
}
func (x Type_Kind) String() string {
	return proto1.EnumName(Type_Kind_name, int32(x))
}
func (x *Type_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(Type_Kind_value, data, "Type_Kind")
	if err != nil {
		return err
	}
	*x = Type_Kind(value)
	return nil
}
func (Type_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type IntegerStatistics struct {
	Minimum          *int64 `protobuf:"zigzag64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *int64 `protobuf:"zigzag64,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum              *int64 `protobuf:"zigzag64,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IntegerStatistics) Reset()                    { *m = IntegerStatistics{} }
func (m *IntegerStatistics) String() string            { return proto1.CompactTextString(m) }
func (*IntegerStatistics) ProtoMessage()               {}
func (*IntegerStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IntegerStatistics) GetMinimum() int64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *IntegerStatistics) GetMaximum() int64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

func (m *IntegerStatistics) GetSum() int64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type DoubleStatistics struct {
	Minimum          *float64 `protobuf:"fixed64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *float64 `protobuf:"fixed64,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum              *float64 `protobuf:"fixed64,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DoubleStatistics) Reset()                    { *m = DoubleStatistics{} }
func (m *DoubleStatistics) String() string            { return proto1.CompactTextString(m) }
func (*DoubleStatistics) ProtoMessage()               {}
func (*DoubleStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DoubleStatistics) GetMinimum() float64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *DoubleStatistics) GetMaximum() float64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

func (m *DoubleStatistics) GetSum() float64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type StringStatistics struct {
	Minimum *string `protobuf:"bytes,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum *string `protobuf:"bytes,2,opt,name=maximum" json:"maximum,omitempty"`
	// sum will store the total length of all strings in a stripe
	Sum              *int64 `protobuf:"zigzag64,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StringStatistics) Reset()                    { *m = StringStatistics{} }
func (m *StringStatistics) String() string            { return proto1.CompactTextString(m) }
func (*StringStatistics) ProtoMessage()               {}
func (*StringStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StringStatistics) GetMinimum() string {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return ""
}

func (m *StringStatistics) GetMaximum() string {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return ""
}

func (m *StringStatistics) GetSum() int64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type BucketStatistics struct {
	Count            []uint64 `protobuf:"varint,1,rep,packed,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BucketStatistics) Reset()                    { *m = BucketStatistics{} }
func (m *BucketStatistics) String() string            { return proto1.CompactTextString(m) }
func (*BucketStatistics) ProtoMessage()               {}
func (*BucketStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BucketStatistics) GetCount() []uint64 {
	if m != nil {
		return m.Count
	}
	return nil
}

type DecimalStatistics struct {
	Minimum          *string `protobuf:"bytes,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *string `protobuf:"bytes,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum              *string `protobuf:"bytes,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DecimalStatistics) Reset()                    { *m = DecimalStatistics{} }
func (m *DecimalStatistics) String() string            { return proto1.CompactTextString(m) }
func (*DecimalStatistics) ProtoMessage()               {}
func (*DecimalStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DecimalStatistics) GetMinimum() string {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return ""
}

func (m *DecimalStatistics) GetMaximum() string {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return ""
}

func (m *DecimalStatistics) GetSum() string {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return ""
}

type DateStatistics struct {
	// min,max values saved as days since epoch
	Minimum          *int32 `protobuf:"zigzag32,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *int32 `protobuf:"zigzag32,2,opt,name=maximum" json:"maximum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DateStatistics) Reset()                    { *m = DateStatistics{} }
func (m *DateStatistics) String() string            { return proto1.CompactTextString(m) }
func (*DateStatistics) ProtoMessage()               {}
func (*DateStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DateStatistics) GetMinimum() int32 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *DateStatistics) GetMaximum() int32 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

type TimestampStatistics struct {
	// min,max values saved as milliseconds since epoch
	Minimum          *int64 `protobuf:"zigzag64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *int64 `protobuf:"zigzag64,2,opt,name=maximum" json:"maximum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TimestampStatistics) Reset()                    { *m = TimestampStatistics{} }
func (m *TimestampStatistics) String() string            { return proto1.CompactTextString(m) }
func (*TimestampStatistics) ProtoMessage()               {}
func (*TimestampStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TimestampStatistics) GetMinimum() int64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *TimestampStatistics) GetMaximum() int64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

type BinaryStatistics struct {
	// sum will store the total binary blob length in a stripe
	Sum              *int64 `protobuf:"zigzag64,1,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BinaryStatistics) Reset()                    { *m = BinaryStatistics{} }
func (m *BinaryStatistics) String() string            { return proto1.CompactTextString(m) }
func (*BinaryStatistics) ProtoMessage()               {}
func (*BinaryStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BinaryStatistics) GetSum() int64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type ColumnStatistics struct {
	NumberOfValues      *uint64              `protobuf:"varint,1,opt,name=numberOfValues" json:"numberOfValues,omitempty"`
	IntStatistics       *IntegerStatistics   `protobuf:"bytes,2,opt,name=intStatistics" json:"intStatistics,omitempty"`
	DoubleStatistics    *DoubleStatistics    `protobuf:"bytes,3,opt,name=doubleStatistics" json:"doubleStatistics,omitempty"`
	StringStatistics    *StringStatistics    `protobuf:"bytes,4,opt,name=stringStatistics" json:"stringStatistics,omitempty"`
	BucketStatistics    *BucketStatistics    `protobuf:"bytes,5,opt,name=bucketStatistics" json:"bucketStatistics,omitempty"`
	DecimalStatistics   *DecimalStatistics   `protobuf:"bytes,6,opt,name=decimalStatistics" json:"decimalStatistics,omitempty"`
	DateStatistics      *DateStatistics      `protobuf:"bytes,7,opt,name=dateStatistics" json:"dateStatistics,omitempty"`
	BinaryStatistics    *BinaryStatistics    `protobuf:"bytes,8,opt,name=binaryStatistics" json:"binaryStatistics,omitempty"`
	TimestampStatistics *TimestampStatistics `protobuf:"bytes,9,opt,name=timestampStatistics" json:"timestampStatistics,omitempty"`
	HasNull             *bool                `protobuf:"varint,10,opt,name=hasNull" json:"hasNull,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *ColumnStatistics) Reset()                    { *m = ColumnStatistics{} }
func (m *ColumnStatistics) String() string            { return proto1.CompactTextString(m) }
func (*ColumnStatistics) ProtoMessage()               {}
func (*ColumnStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ColumnStatistics) GetNumberOfValues() uint64 {
	if m != nil && m.NumberOfValues != nil {
		return *m.NumberOfValues
	}
	return 0
}

func (m *ColumnStatistics) GetIntStatistics() *IntegerStatistics {
	if m != nil {
		return m.IntStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetDoubleStatistics() *DoubleStatistics {
	if m != nil {
		return m.DoubleStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetStringStatistics() *StringStatistics {
	if m != nil {
		return m.StringStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetBucketStatistics() *BucketStatistics {
	if m != nil {
		return m.BucketStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetDecimalStatistics() *DecimalStatistics {
	if m != nil {
		return m.DecimalStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetDateStatistics() *DateStatistics {
	if m != nil {
		return m.DateStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetBinaryStatistics() *BinaryStatistics {
	if m != nil {
		return m.BinaryStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetTimestampStatistics() *TimestampStatistics {
	if m != nil {
		return m.TimestampStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetHasNull() bool {
	if m != nil && m.HasNull != nil {
		return *m.HasNull
	}
	return false
}

type RowIndexEntry struct {
	Positions        []uint64          `protobuf:"varint,1,rep,packed,name=positions" json:"positions,omitempty"`
	Statistics       *ColumnStatistics `protobuf:"bytes,2,opt,name=statistics" json:"statistics,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RowIndexEntry) Reset()                    { *m = RowIndexEntry{} }
func (m *RowIndexEntry) String() string            { return proto1.CompactTextString(m) }
func (*RowIndexEntry) ProtoMessage()               {}
func (*RowIndexEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RowIndexEntry) GetPositions() []uint64 {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *RowIndexEntry) GetStatistics() *ColumnStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type RowIndex struct {
	Entry            []*RowIndexEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *RowIndex) Reset()                    { *m = RowIndex{} }
func (m *RowIndex) String() string            { return proto1.CompactTextString(m) }
func (*RowIndex) ProtoMessage()               {}
func (*RowIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RowIndex) GetEntry() []*RowIndexEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type BloomFilter struct {
	NumHashFunctions *uint32  `protobuf:"varint,1,opt,name=numHashFunctions" json:"numHashFunctions,omitempty"`
	Bitset           []uint64 `protobuf:"fixed64,2,rep,name=bitset" json:"bitset,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BloomFilter) Reset()                    { *m = BloomFilter{} }
func (m *BloomFilter) String() string            { return proto1.CompactTextString(m) }
func (*BloomFilter) ProtoMessage()               {}
func (*BloomFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BloomFilter) GetNumHashFunctions() uint32 {
	if m != nil && m.NumHashFunctions != nil {
		return *m.NumHashFunctions
	}
	return 0
}

func (m *BloomFilter) GetBitset() []uint64 {
	if m != nil {
		return m.Bitset
	}
	return nil
}

type BloomFilterIndex struct {
	BloomFilter      []*BloomFilter `protobuf:"bytes,1,rep,name=bloomFilter" json:"bloomFilter,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *BloomFilterIndex) Reset()                    { *m = BloomFilterIndex{} }
func (m *BloomFilterIndex) String() string            { return proto1.CompactTextString(m) }
func (*BloomFilterIndex) ProtoMessage()               {}
func (*BloomFilterIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BloomFilterIndex) GetBloomFilter() []*BloomFilter {
	if m != nil {
		return m.BloomFilter
	}
	return nil
}

type Stream struct {
	Kind             *Stream_Kind `protobuf:"varint,1,opt,name=kind,enum=proto.Stream_Kind" json:"kind,omitempty"`
	Column           *uint32      `protobuf:"varint,2,opt,name=column" json:"column,omitempty"`
	Length           *uint64      `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Stream) Reset()                    { *m = Stream{} }
func (m *Stream) String() string            { return proto1.CompactTextString(m) }
func (*Stream) ProtoMessage()               {}
func (*Stream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Stream) GetKind() Stream_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Stream_PRESENT
}

func (m *Stream) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *Stream) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

type ColumnEncoding struct {
	Kind             *ColumnEncoding_Kind `protobuf:"varint,1,opt,name=kind,enum=proto.ColumnEncoding_Kind" json:"kind,omitempty"`
	DictionarySize   *uint32              `protobuf:"varint,2,opt,name=dictionarySize" json:"dictionarySize,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ColumnEncoding) Reset()                    { *m = ColumnEncoding{} }
func (m *ColumnEncoding) String() string            { return proto1.CompactTextString(m) }
func (*ColumnEncoding) ProtoMessage()               {}
func (*ColumnEncoding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ColumnEncoding) GetKind() ColumnEncoding_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ColumnEncoding_DIRECT
}

func (m *ColumnEncoding) GetDictionarySize() uint32 {
	if m != nil && m.DictionarySize != nil {
		return *m.DictionarySize
	}
	return 0
}

type StripeFooter struct {
	Streams          []*Stream         `protobuf:"bytes,1,rep,name=streams" json:"streams,omitempty"`
	Columns          []*ColumnEncoding `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	WriterTimezone   *string           `protobuf:"bytes,3,opt,name=writerTimezone" json:"writerTimezone,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *StripeFooter) Reset()                    { *m = StripeFooter{} }
func (m *StripeFooter) String() string            { return proto1.CompactTextString(m) }
func (*StripeFooter) ProtoMessage()               {}
func (*StripeFooter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *StripeFooter) GetStreams() []*Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *StripeFooter) GetColumns() []*ColumnEncoding {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *StripeFooter) GetWriterTimezone() string {
	if m != nil && m.WriterTimezone != nil {
		return *m.WriterTimezone
	}
	return ""
}

type Type struct {
	Kind             *Type_Kind `protobuf:"varint,1,opt,name=kind,enum=proto.Type_Kind" json:"kind,omitempty"`
	Subtypes         []uint32   `protobuf:"varint,2,rep,packed,name=subtypes" json:"subtypes,omitempty"`
	FieldNames       []string   `protobuf:"bytes,3,rep,name=fieldNames" json:"fieldNames,omitempty"`
	MaximumLength    *uint32    `protobuf:"varint,4,opt,name=maximumLength" json:"maximumLength,omitempty"`
	Precision        *uint32    `protobuf:"varint,5,opt,name=precision" json:"precision,omitempty"`
	Scale            *uint32    `protobuf:"varint,6,opt,name=scale" json:"scale,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto1.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Type) GetKind() Type_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Type_BOOLEAN
}

func (m *Type) GetSubtypes() []uint32 {
	if m != nil {
		return m.Subtypes
	}
	return nil
}

func (m *Type) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

func (m *Type) GetMaximumLength() uint32 {
	if m != nil && m.MaximumLength != nil {
		return *m.MaximumLength
	}
	return 0
}

func (m *Type) GetPrecision() uint32 {
	if m != nil && m.Precision != nil {
		return *m.Precision
	}
	return 0
}

func (m *Type) GetScale() uint32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

type StripeInformation struct {
	Offset           *uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	IndexLength      *uint64 `protobuf:"varint,2,opt,name=indexLength" json:"indexLength,omitempty"`
	DataLength       *uint64 `protobuf:"varint,3,opt,name=dataLength" json:"dataLength,omitempty"`
	FooterLength     *uint64 `protobuf:"varint,4,opt,name=footerLength" json:"footerLength,omitempty"`
	NumberOfRows     *uint64 `protobuf:"varint,5,opt,name=numberOfRows" json:"numberOfRows,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StripeInformation) Reset()                    { *m = StripeInformation{} }
func (m *StripeInformation) String() string            { return proto1.CompactTextString(m) }
func (*StripeInformation) ProtoMessage()               {}
func (*StripeInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StripeInformation) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *StripeInformation) GetIndexLength() uint64 {
	if m != nil && m.IndexLength != nil {
		return *m.IndexLength
	}
	return 0
}

func (m *StripeInformation) GetDataLength() uint64 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *StripeInformation) GetFooterLength() uint64 {
	if m != nil && m.FooterLength != nil {
		return *m.FooterLength
	}
	return 0
}

func (m *StripeInformation) GetNumberOfRows() uint64 {
	if m != nil && m.NumberOfRows != nil {
		return *m.NumberOfRows
	}
	return 0
}

type UserMetadataItem struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserMetadataItem) Reset()                    { *m = UserMetadataItem{} }
func (m *UserMetadataItem) String() string            { return proto1.CompactTextString(m) }
func (*UserMetadataItem) ProtoMessage()               {}
func (*UserMetadataItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UserMetadataItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UserMetadataItem) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type StripeStatistics struct {
	ColStats         []*ColumnStatistics `protobuf:"bytes,1,rep,name=colStats" json:"colStats,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *StripeStatistics) Reset()                    { *m = StripeStatistics{} }
func (m *StripeStatistics) String() string            { return proto1.CompactTextString(m) }
func (*StripeStatistics) ProtoMessage()               {}
func (*StripeStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *StripeStatistics) GetColStats() []*ColumnStatistics {
	if m != nil {
		return m.ColStats
	}
	return nil
}

type Metadata struct {
	StripeStats      []*StripeStatistics `protobuf:"bytes,1,rep,name=stripeStats" json:"stripeStats,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto1.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Metadata) GetStripeStats() []*StripeStatistics {
	if m != nil {
		return m.StripeStats
	}
	return nil
}

type Footer struct {
	HeaderLength     *uint64              `protobuf:"varint,1,opt,name=headerLength" json:"headerLength,omitempty"`
	ContentLength    *uint64              `protobuf:"varint,2,opt,name=contentLength" json:"contentLength,omitempty"`
	Stripes          []*StripeInformation `protobuf:"bytes,3,rep,name=stripes" json:"stripes,omitempty"`
	Types            []*Type              `protobuf:"bytes,4,rep,name=types" json:"types,omitempty"`
	Metadata         []*UserMetadataItem  `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty"`
	NumberOfRows     *uint64              `protobuf:"varint,6,opt,name=numberOfRows" json:"numberOfRows,omitempty"`
	Statistics       []*ColumnStatistics  `protobuf:"bytes,7,rep,name=statistics" json:"statistics,omitempty"`
	RowIndexStride   *uint32              `protobuf:"varint,8,opt,name=rowIndexStride" json:"rowIndexStride,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Footer) Reset()                    { *m = Footer{} }
func (m *Footer) String() string            { return proto1.CompactTextString(m) }
func (*Footer) ProtoMessage()               {}
func (*Footer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Footer) GetHeaderLength() uint64 {
	if m != nil && m.HeaderLength != nil {
		return *m.HeaderLength
	}
	return 0
}

func (m *Footer) GetContentLength() uint64 {
	if m != nil && m.ContentLength != nil {
		return *m.ContentLength
	}
	return 0
}

func (m *Footer) GetStripes() []*StripeInformation {
	if m != nil {
		return m.Stripes
	}
	return nil
}

func (m *Footer) GetTypes() []*Type {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *Footer) GetMetadata() []*UserMetadataItem {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Footer) GetNumberOfRows() uint64 {
	if m != nil && m.NumberOfRows != nil {
		return *m.NumberOfRows
	}
	return 0
}

func (m *Footer) GetStatistics() []*ColumnStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *Footer) GetRowIndexStride() uint32 {
	if m != nil && m.RowIndexStride != nil {
		return *m.RowIndexStride
	}
	return 0
}

// Serialized length must be less that 255 bytes
type PostScript struct {
	FooterLength         *uint64          `protobuf:"varint,1,opt,name=footerLength" json:"footerLength,omitempty"`
	Compression          *CompressionKind `protobuf:"varint,2,opt,name=compression,enum=proto.CompressionKind" json:"compression,omitempty"`
	CompressionBlockSize *uint64          `protobuf:"varint,3,opt,name=compressionBlockSize" json:"compressionBlockSize,omitempty"`
	// the version of the file format
	//   [0, 11] = Hive 0.11
	//   [0, 12] = Hive 0.12
	Version        []uint32 `protobuf:"varint,4,rep,packed,name=version" json:"version,omitempty"`
	MetadataLength *uint64  `protobuf:"varint,5,opt,name=metadataLength" json:"metadataLength,omitempty"`
	// Version of the writer:
	//   0 (or missing) = original
	//   1 = HIVE-8732 fixed
	WriterVersion *uint32 `protobuf:"varint,6,opt,name=writerVersion" json:"writerVersion,omitempty"`
	// Leave this last in the record
	Magic            *string `protobuf:"bytes,8000,opt,name=magic" json:"magic,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PostScript) Reset()                    { *m = PostScript{} }
func (m *PostScript) String() string            { return proto1.CompactTextString(m) }
func (*PostScript) ProtoMessage()               {}
func (*PostScript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PostScript) GetFooterLength() uint64 {
	if m != nil && m.FooterLength != nil {
		return *m.FooterLength
	}
	return 0
}

func (m *PostScript) GetCompression() CompressionKind {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return CompressionKind_NONE
}

func (m *PostScript) GetCompressionBlockSize() uint64 {
	if m != nil && m.CompressionBlockSize != nil {
		return *m.CompressionBlockSize
	}
	return 0
}

func (m *PostScript) GetVersion() []uint32 {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *PostScript) GetMetadataLength() uint64 {
	if m != nil && m.MetadataLength != nil {
		return *m.MetadataLength
	}
	return 0
}

func (m *PostScript) GetWriterVersion() uint32 {
	if m != nil && m.WriterVersion != nil {
		return *m.WriterVersion
	}
	return 0
}

func (m *PostScript) GetMagic() string {
	if m != nil && m.Magic != nil {
		return *m.Magic
	}
	return ""
}

// The contents of the file tail that must be serialized.
type FileTail struct {
	Postscript       *PostScript `protobuf:"bytes,1,opt,name=postscript" json:"postscript,omitempty"`
	Footer           *Footer     `protobuf:"bytes,2,opt,name=footer" json:"footer,omitempty"`
	FooterStart      *uint64     `protobuf:"varint,3,opt,name=footerStart" json:"footerStart,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FileTail) Reset()                    { *m = FileTail{} }
func (m *FileTail) String() string            { return proto1.CompactTextString(m) }
func (*FileTail) ProtoMessage()               {}
func (*FileTail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *FileTail) GetPostscript() *PostScript {
	if m != nil {
		return m.Postscript
	}
	return nil
}

func (m *FileTail) GetFooter() *Footer {
	if m != nil {
		return m.Footer
	}
	return nil
}

func (m *FileTail) GetFooterStart() uint64 {
	if m != nil && m.FooterStart != nil {
		return *m.FooterStart
	}
	return 0
}

func init() {
	proto1.RegisterType((*IntegerStatistics)(nil), "proto.IntegerStatistics")
	proto1.RegisterType((*DoubleStatistics)(nil), "proto.DoubleStatistics")
	proto1.RegisterType((*StringStatistics)(nil), "proto.StringStatistics")
	proto1.RegisterType((*BucketStatistics)(nil), "proto.BucketStatistics")
	proto1.RegisterType((*DecimalStatistics)(nil), "proto.DecimalStatistics")
	proto1.RegisterType((*DateStatistics)(nil), "proto.DateStatistics")
	proto1.RegisterType((*TimestampStatistics)(nil), "proto.TimestampStatistics")
	proto1.RegisterType((*BinaryStatistics)(nil), "proto.BinaryStatistics")
	proto1.RegisterType((*ColumnStatistics)(nil), "proto.ColumnStatistics")
	proto1.RegisterType((*RowIndexEntry)(nil), "proto.RowIndexEntry")
	proto1.RegisterType((*RowIndex)(nil), "proto.RowIndex")
	proto1.RegisterType((*BloomFilter)(nil), "proto.BloomFilter")
	proto1.RegisterType((*BloomFilterIndex)(nil), "proto.BloomFilterIndex")
	proto1.RegisterType((*Stream)(nil), "proto.Stream")
	proto1.RegisterType((*ColumnEncoding)(nil), "proto.ColumnEncoding")
	proto1.RegisterType((*StripeFooter)(nil), "proto.StripeFooter")
	proto1.RegisterType((*Type)(nil), "proto.Type")
	proto1.RegisterType((*StripeInformation)(nil), "proto.StripeInformation")
	proto1.RegisterType((*UserMetadataItem)(nil), "proto.UserMetadataItem")
	proto1.RegisterType((*StripeStatistics)(nil), "proto.StripeStatistics")
	proto1.RegisterType((*Metadata)(nil), "proto.Metadata")
	proto1.RegisterType((*Footer)(nil), "proto.Footer")
	proto1.RegisterType((*PostScript)(nil), "proto.PostScript")
	proto1.RegisterType((*FileTail)(nil), "proto.FileTail")
	proto1.RegisterEnum("proto.CompressionKind", CompressionKind_name, CompressionKind_value)
	proto1.RegisterEnum("proto.Stream_Kind", Stream_Kind_name, Stream_Kind_value)
	proto1.RegisterEnum("proto.ColumnEncoding_Kind", ColumnEncoding_Kind_name, ColumnEncoding_Kind_value)
	proto1.RegisterEnum("proto.Type_Kind", Type_Kind_name, Type_Kind_value)
}

var fileDescriptor0 = []byte{
	// 1502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0x49, 0x6f, 0xe3, 0xc6,
	0x12, 0x7e, 0xb4, 0xa8, 0xad, 0x64, 0x69, 0xa8, 0x9e, 0xe5, 0x09, 0x83, 0x87, 0x87, 0x79, 0xc4,
	0xbc, 0xc4, 0x18, 0x04, 0x0e, 0xe2, 0x04, 0xd9, 0x90, 0x0c, 0xa0, 0x85, 0x1e, 0x13, 0x91, 0x45,
	0xa7, 0x45, 0x3b, 0xe3, 0xb9, 0x18, 0x34, 0x45, 0xdb, 0xcc, 0x88, 0xa4, 0x40, 0x52, 0xb3, 0x9d,
	0x83, 0x9c, 0x73, 0xce, 0x2d, 0x7f, 0x20, 0xb7, 0xdc, 0xf3, 0x17, 0xf2, 0x1b, 0x72, 0xc8, 0xaf,
	0x08, 0x90, 0xea, 0x85, 0x12, 0x49, 0xd9, 0x73, 0x49, 0x4e, 0x64, 0x7f, 0x55, 0x5d, 0x5d, 0xcb,
	0x57, 0xd5, 0x0d, 0xcd, 0x28, 0x76, 0x77, 0x17, 0x71, 0x94, 0x46, 0xa4, 0xca, 0x3f, 0xfa, 0x29,
	0x74, 0xcd, 0x30, 0xf5, 0x2e, 0xbd, 0x78, 0x9a, 0x3a, 0xa9, 0x9f, 0xa4, 0xbe, 0x9b, 0x90, 0x1e,
	0xd4, 0x03, 0x3f, 0xf4, 0x83, 0x65, 0xd0, 0x53, 0x1e, 0x28, 0x3b, 0x84, 0x66, 0x4b, 0x2e, 0x71,
	0x5e, 0x71, 0xc9, 0x96, 0x94, 0x88, 0x25, 0xd1, 0xa0, 0x92, 0x20, 0x5a, 0xe1, 0x28, 0xfb, 0xd5,
	0x9f, 0x82, 0x36, 0x8a, 0x96, 0xe7, 0x73, 0xef, 0x66, 0xcb, 0xca, 0x8d, 0x96, 0x95, 0x6b, 0x2d,
	0x2b, 0x2b, 0xcb, 0xd3, 0x34, 0xf6, 0xc3, 0xcb, 0x9b, 0x2d, 0x37, 0x6f, 0xb4, 0xdc, 0x7c, 0x9b,
	0xcf, 0xef, 0x81, 0x36, 0x58, 0xba, 0xcf, 0xbd, 0xb4, 0x60, 0xb9, 0xea, 0x46, 0xcb, 0x30, 0x45,
	0xbb, 0x95, 0x1d, 0x75, 0xb0, 0xa5, 0x29, 0x54, 0x00, 0x2c, 0x79, 0x23, 0xcf, 0xf5, 0x03, 0x67,
	0xfe, 0xcf, 0x39, 0xd2, 0x14, 0x8e, 0x8c, 0xa0, 0x33, 0x72, 0xd2, 0xb7, 0xa4, 0xae, 0x7b, 0xa3,
	0xdd, 0xee, 0xca, 0xae, 0x6e, 0xc2, 0x6d, 0xdb, 0x0f, 0xbc, 0x24, 0x75, 0x82, 0xc5, 0xdf, 0xab,
	0xaf, 0xfe, 0x10, 0x33, 0xe3, 0x87, 0x4e, 0xfc, 0x3a, 0x67, 0x47, 0xba, 0xad, 0xac, 0xf3, 0xf7,
	0xa7, 0x0a, 0xda, 0x30, 0x9a, 0x2f, 0x83, 0x30, 0xa7, 0xf6, 0x0e, 0x74, 0xc2, 0x65, 0x70, 0xee,
	0xc5, 0xd6, 0xc5, 0x89, 0x33, 0x5f, 0x7a, 0x09, 0xdf, 0xa1, 0xd2, 0x12, 0x4a, 0x1e, 0x43, 0xdb,
	0x0f, 0x73, 0x99, 0xe7, 0x2e, 0xb4, 0xf6, 0x7a, 0x82, 0xb1, 0xbb, 0x1b, 0x3c, 0xa5, 0x45, 0x75,
	0x32, 0x04, 0x6d, 0x56, 0x22, 0x1c, 0x4f, 0x69, 0x6b, 0xef, 0xdf, 0xd2, 0x44, 0x99, 0x8f, 0x74,
	0x63, 0x03, 0x33, 0x92, 0x94, 0xb8, 0xd5, 0x53, 0x0b, 0x46, 0xca, 0xd4, 0xa3, 0x1b, 0x1b, 0x98,
	0x91, 0xf3, 0x12, 0x8d, 0x7a, 0xd5, 0x82, 0x91, 0x32, 0xcb, 0xe8, 0xc6, 0x06, 0xb2, 0x0f, 0xdd,
	0x59, 0x99, 0x5d, 0xbd, 0x5a, 0x21, 0x25, 0x1b, 0xec, 0xa3, 0x9b, 0x5b, 0xc8, 0x97, 0xd0, 0x99,
	0x15, 0xa8, 0xd4, 0xab, 0x73, 0x23, 0x77, 0x33, 0x23, 0x05, 0x21, 0x2d, 0x29, 0xf3, 0x58, 0x4a,
	0x85, 0xef, 0x35, 0x8a, 0xb1, 0x94, 0xc4, 0x74, 0x63, 0x03, 0x19, 0xc3, 0xed, 0x74, 0x93, 0x88,
	0xbd, 0x26, 0xb7, 0x73, 0x5f, 0xda, 0xb9, 0x86, 0xaa, 0xf4, 0xba, 0x6d, 0x8c, 0xa5, 0x57, 0x4e,
	0x32, 0x59, 0xce, 0xe7, 0x3d, 0x40, 0x0b, 0x0d, 0x9a, 0x2d, 0xf5, 0x6f, 0xa1, 0x4d, 0xa3, 0x97,
	0x66, 0x38, 0xf3, 0x5e, 0x19, 0x61, 0x1a, 0xbf, 0x26, 0x0f, 0xa0, 0xb9, 0x88, 0x12, 0x3f, 0xf5,
	0xa3, 0x30, 0xc9, 0x35, 0xf0, 0x1a, 0x24, 0x9f, 0x00, 0x24, 0x65, 0xca, 0x65, 0x91, 0x95, 0xa9,
	0x4c, 0x73, 0xaa, 0xfa, 0xc7, 0xd0, 0xc8, 0xce, 0x22, 0x8f, 0xa0, 0xea, 0xb1, 0xf3, 0xf8, 0x11,
	0xad, 0xbd, 0x3b, 0x72, 0x7f, 0xc1, 0x17, 0x2a, 0x54, 0xf4, 0xaf, 0xa1, 0x35, 0x98, 0x47, 0x51,
	0xb0, 0xef, 0xcf, 0x53, 0x2f, 0xc6, 0xad, 0x1a, 0xf6, 0xc1, 0x81, 0x93, 0x5c, 0xed, 0x2f, 0x43,
	0x37, 0x73, 0x54, 0xd9, 0x69, 0xd3, 0x0d, 0x9c, 0xdc, 0x83, 0xda, 0xb9, 0x9f, 0x26, 0x5e, 0x8a,
	0x7e, 0x56, 0x76, 0x6a, 0x54, 0xae, 0xf4, 0x03, 0x6c, 0xce, 0xb5, 0x49, 0xe1, 0xd2, 0x47, 0xd0,
	0x3a, 0x5f, 0x63, 0xd2, 0x31, 0x92, 0x95, 0x6c, 0x2d, 0xa1, 0x79, 0x35, 0xfd, 0x0f, 0x05, 0x6a,
	0x48, 0x70, 0xcf, 0x09, 0xb0, 0x6d, 0xd5, 0xe7, 0x7e, 0x38, 0xe3, 0xce, 0x74, 0x56, 0x3b, 0x85,
	0x70, 0xf7, 0x2b, 0x94, 0x50, 0x2e, 0x67, 0x4e, 0xb9, 0x3c, 0x4f, 0x3c, 0x79, 0x6d, 0x2a, 0x57,
	0x0c, 0x9f, 0x7b, 0xe1, 0x65, 0x7a, 0xc5, 0x9b, 0x50, 0xa5, 0x72, 0xa5, 0x7f, 0xa7, 0x80, 0xca,
	0xb6, 0x93, 0x16, 0xd4, 0x8f, 0xa8, 0x31, 0x35, 0x26, 0xb6, 0xf6, 0x2f, 0xd2, 0x00, 0x75, 0xd4,
	0xb7, 0xfb, 0x9a, 0x42, 0x00, 0x6a, 0x63, 0x63, 0xf2, 0xc4, 0x3e, 0xd0, 0xb6, 0xc8, 0x6d, 0xb8,
	0x35, 0x32, 0x87, 0xb6, 0x69, 0x4d, 0xfa, 0xf4, 0xf4, 0x8c, 0x2b, 0x54, 0xc8, 0x1d, 0xbc, 0x58,
	0xd6, 0xe0, 0xd0, 0x3a, 0x46, 0x03, 0x2a, 0x69, 0x43, 0x73, 0x6a, 0x0c, 0xad, 0xc9, 0x08, 0x41,
	0xad, 0xca, 0x96, 0xd4, 0xfa, 0xe6, 0xcc, 0x9c, 0x8c, 0x8c, 0xa7, 0x5a, 0x0d, 0x47, 0xd5, 0xf6,
	0x60, 0x6c, 0x59, 0x87, 0x67, 0xfb, 0xe6, 0xd8, 0x36, 0xa8, 0x56, 0xd7, 0x7f, 0x56, 0xa0, 0x23,
	0xea, 0x6b, 0x84, 0x6e, 0x34, 0xc3, 0x06, 0x26, 0xbb, 0x85, 0x88, 0xef, 0x17, 0x48, 0x90, 0x29,
	0xe5, 0x23, 0xc7, 0xc1, 0x36, 0xf3, 0x79, 0x69, 0x18, 0xdb, 0xfd, 0x37, 0x9e, 0xcc, 0x40, 0x09,
	0xc5, 0x61, 0x2e, 0x02, 0xc6, 0xc8, 0x46, 0x26, 0x35, 0x86, 0x2c, 0xde, 0x0e, 0xc0, 0x3a, 0x08,
	0x8c, 0x1a, 0xfd, 0x15, 0xb2, 0xb3, 0x93, 0x3d, 0x0c, 0xbc, 0x0b, 0xed, 0x5c, 0x8c, 0x08, 0x55,
	0xf4, 0x1f, 0x14, 0xd8, 0x66, 0xb3, 0x67, 0xe1, 0xed, 0x47, 0x11, 0x63, 0xce, 0xbb, 0x50, 0x4f,
	0x78, 0x35, 0x12, 0x59, 0xdd, 0x76, 0xa1, 0x46, 0x34, 0x93, 0x92, 0xf7, 0xa1, 0x2e, 0x6a, 0x92,
	0x70, 0xde, 0xac, 0x5b, 0xbf, 0x18, 0x1a, 0xcd, 0xb4, 0x58, 0x60, 0x2f, 0x63, 0x1f, 0xcf, 0x60,
	0x2d, 0xf9, 0x26, 0x0a, 0x3d, 0x79, 0x35, 0x95, 0x50, 0xfd, 0xc7, 0x0a, 0xa8, 0xf6, 0xeb, 0x85,
	0x47, 0x1e, 0x16, 0x32, 0xa7, 0x65, 0x0d, 0x8d, 0xa2, 0x7c, 0xbe, 0xfe, 0x0b, 0x8d, 0x64, 0x79,
	0x9e, 0x22, 0x2a, 0x1c, 0x69, 0xf3, 0x5e, 0x5c, 0x61, 0x28, 0x87, 0x0b, 0xdf, 0x9b, 0xcf, 0x26,
	0x0e, 0xf6, 0x3c, 0x1e, 0x59, 0xc1, 0x23, 0x73, 0x08, 0x9e, 0xd2, 0x96, 0xd7, 0xd1, 0x58, 0x10,
	0x4b, 0xe5, 0xe9, 0x2e, 0x82, 0xe4, 0x3f, 0xd8, 0xf2, 0x31, 0x4e, 0xc1, 0x04, 0x2b, 0xc0, 0xa7,
	0x6e, 0x9b, 0xae, 0x01, 0x24, 0x4f, 0x35, 0x71, 0x9d, 0xb9, 0xc7, 0x27, 0x69, 0x9b, 0x8a, 0x85,
	0xfe, 0x5b, 0x8e, 0x93, 0x03, 0xcb, 0x1a, 0x1b, 0xfd, 0x89, 0xe0, 0xe4, 0xe0, 0xd4, 0x36, 0xb0,
	0x3a, 0x4d, 0xa8, 0x4e, 0x0f, 0x2c, 0x6a, 0x63, 0x65, 0xea, 0x50, 0x31, 0x91, 0x70, 0x15, 0x26,
	0x1d, 0x5b, 0x93, 0x27, 0x48, 0x3d, 0x94, 0xee, 0x8f, 0xad, 0xbe, 0x8d, 0xb4, 0x63, 0x25, 0xb6,
	0x8e, 0x07, 0x63, 0x03, 0x39, 0x87, 0xff, 0x53, 0x9b, 0x9a, 0xa8, 0x52, 0x67, 0xff, 0x03, 0x93,
	0x97, 0xba, 0xc1, 0x4a, 0x6d, 0x9b, 0x87, 0xc6, 0xd4, 0xee, 0x1f, 0x1e, 0x69, 0x4d, 0x6e, 0xc7,
	0x9c, 0xda, 0x1a, 0x30, 0xd3, 0x87, 0xfd, 0x23, 0xad, 0x25, 0x77, 0x1e, 0x23, 0x51, 0xb6, 0x99,
	0xf1, 0xe3, 0x09, 0xf2, 0x40, 0x6b, 0x33, 0xe7, 0x46, 0xc6, 0xd0, 0x3c, 0xec, 0x8f, 0xb5, 0x8e,
	0x6c, 0x18, 0x43, 0xbb, 0xc5, 0xe0, 0x93, 0x3e, 0x1d, 0x1e, 0xf4, 0xa9, 0xa6, 0x31, 0x98, 0xff,
	0x75, 0xf5, 0x5f, 0x14, 0xe8, 0x0a, 0xbe, 0x98, 0xe1, 0x45, 0x14, 0x07, 0x0e, 0xa3, 0x24, 0xeb,
	0xca, 0xe8, 0xe2, 0x82, 0x8d, 0x10, 0x71, 0x09, 0xcb, 0x15, 0x0e, 0xca, 0x96, 0xcf, 0xe6, 0x86,
	0xcc, 0xec, 0x16, 0x17, 0xe6, 0x21, 0x56, 0x1d, 0xbc, 0x1a, 0x9c, 0x71, 0xbe, 0xa7, 0x73, 0x08,
	0xd1, 0x61, 0xfb, 0x82, 0x13, 0x33, 0x57, 0x1c, 0x95, 0x16, 0x30, 0xa6, 0x93, 0x5d, 0xfa, 0x38,
	0x1b, 0xc5, 0xa5, 0x88, 0x3a, 0x79, 0x4c, 0xff, 0x02, 0xb4, 0xe3, 0xc4, 0x8b, 0x0f, 0xbd, 0xd4,
	0x61, 0xd6, 0xcd, 0xd4, 0x0b, 0x08, 0x01, 0x35, 0x44, 0x0a, 0xc8, 0x17, 0x15, 0xff, 0x67, 0x95,
	0x7c, 0xc1, 0x1e, 0x0e, 0xdc, 0xd7, 0x6d, 0x2a, 0x16, 0xfa, 0x13, 0xf1, 0x36, 0x5c, 0xe4, 0xaf,
	0xb0, 0x0f, 0xa1, 0x81, 0xcc, 0x66, 0x40, 0xd6, 0x29, 0x37, 0x0e, 0xf8, 0x95, 0xa2, 0x6e, 0x40,
	0x23, 0x73, 0x81, 0x7c, 0x06, 0xad, 0x64, 0x65, 0xb4, 0x6c, 0xa3, 0x7c, 0x1c, 0xcd, 0xeb, 0xea,
	0xbf, 0x6f, 0x41, 0x4d, 0xf6, 0x2b, 0x06, 0x7f, 0xe5, 0x39, 0xb3, 0x55, 0x82, 0x44, 0x01, 0x0a,
	0x18, 0xa3, 0xb8, 0x1b, 0xe1, 0x43, 0x27, 0x4c, 0x0b, 0x85, 0x28, 0x82, 0x64, 0x8f, 0x77, 0xbe,
	0xbf, 0x90, 0x5d, 0xb2, 0x7e, 0x10, 0x6c, 0xd4, 0x9b, 0x66, 0x8a, 0xe4, 0x7f, 0x50, 0x15, 0x9d,
	0xa7, 0xf2, 0x1d, 0xad, 0x5c, 0x8f, 0x52, 0x21, 0x61, 0x79, 0x0a, 0x64, 0xc8, 0x58, 0x99, 0x7c,
	0x8c, 0xe5, 0x82, 0xd0, 0x95, 0xe2, 0x46, 0x49, 0x6b, 0x9b, 0x25, 0x2d, 0xdd, 0xb1, 0xf5, 0xb7,
	0x97, 0x20, 0xa7, 0xca, 0x06, 0x51, 0x2c, 0xef, 0x50, 0x16, 0xda, 0xcc, 0xe3, 0x4f, 0x0f, 0x9c,
	0xb0, 0x45, 0x54, 0xff, 0x69, 0x0b, 0xe0, 0x28, 0x4a, 0xd2, 0xa9, 0x8b, 0xc1, 0xa6, 0x1b, 0x54,
	0x54, 0xae, 0xa1, 0xe2, 0xa7, 0xd0, 0x72, 0xa3, 0x00, 0x07, 0x43, 0xc2, 0x07, 0xc5, 0x16, 0x9f,
	0x5c, 0xf7, 0x56, 0x4e, 0xad, 0x24, 0x7c, 0x7e, 0xe5, 0x55, 0x31, 0xfb, 0x77, 0x72, 0x4b, 0xbc,
	0x4a, 0xdd, 0xe7, 0x7c, 0xf8, 0x8b, 0x96, 0xb8, 0x56, 0x86, 0x43, 0xa9, 0xfe, 0xc2, 0x8b, 0xf9,
	0x49, 0xea, 0x6a, 0xf2, 0x65, 0x10, 0x0b, 0x33, 0xcb, 0xa7, 0xf4, 0x58, 0x34, 0x46, 0x09, 0x65,
	0xec, 0x10, 0x13, 0xf8, 0x44, 0xda, 0x12, 0x43, 0xac, 0x08, 0x92, 0xbb, 0x50, 0x0d, 0x9c, 0x4b,
	0xdf, 0xed, 0xfd, 0xfa, 0x98, 0xb7, 0x8b, 0x58, 0xe9, 0xdf, 0x2b, 0xd0, 0xc0, 0x5b, 0xde, 0xb3,
	0x1d, 0x7f, 0x4e, 0x3e, 0x00, 0xc0, 0x27, 0x50, 0x9a, 0xf0, 0x7c, 0xf1, 0xfc, 0xb4, 0xf6, 0xba,
	0x32, 0xf8, 0x75, 0x22, 0x69, 0x4e, 0x89, 0xfc, 0x1f, 0x6a, 0x22, 0x81, 0xf2, 0x91, 0x94, 0xdd,
	0x36, 0x82, 0xdd, 0x54, 0x0a, 0xd9, 0x20, 0x11, 0x7f, 0x58, 0xd2, 0x38, 0x95, 0x49, 0xc9, 0x43,
	0x8f, 0x3e, 0x87, 0x5b, 0xa5, 0xfc, 0xb2, 0xa9, 0x35, 0xb1, 0x26, 0x86, 0x98, 0xb9, 0xcf, 0xc6,
	0xe6, 0x40, 0xbc, 0x03, 0xa6, 0x93, 0xfe, 0xd1, 0xd1, 0xa9, 0x18, 0xba, 0xe3, 0x67, 0x96, 0x56,
	0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xef, 0xc2, 0x22, 0x19, 0xc2, 0x0e, 0x00, 0x00,
}
